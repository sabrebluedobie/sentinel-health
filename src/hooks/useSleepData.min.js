// @ts-nocheck
import{useEffect,useState}from"react";import { supabase } from"../lib/supabase";import{useAuth}from"../components/AuthContext";export function useSleepData({days:e=14}={}){const{user:t}=useAuth(),[s,a]=useState([]),[n,r]=useState({light:0,deep:0,rem:0,awake:0}),[i,u]=useState(!0),[o,m]=useState("");return useEffect((()=>{if(!t)return void u(!1);const s=new Date;s.setDate(s.getDate()-e);let n=!1;async function i(){u(!0);const{data:e,error:i}=await supabase.from("sleep_sessions").select("id, start_time, end_time, efficiency, stages").eq("user_id",t.id).gte("start_time",s.toISOString()).order("start_time",{ascending:!0});if(n)return;if(i)return m(i.message||"Failed to fetch sleep data"),void u(!1);const o=(e||[]).map((e=>({id:e.id,start:new Date(e.start_time),end:e.end_time?new Date(e.end_time):null,efficiency:null==e.efficiency?null:Number(e.efficiency),stages:e.stages||{light:0,deep:0,rem:0,awake:0},totalMinutes:(()=>{if(!e.end_time)return null;const t=new Date(e.end_time)-new Date(e.start_time);return Math.round(t/6e4)})()}))),c={light:0,deep:0,rem:0,awake:0};for(const e of o)c.light+=Number(e.stages?.light||0),c.deep+=Number(e.stages?.deep||0),c.rem+=Number(e.stages?.rem||0),c.awake+=Number(e.stages?.awake||0);a(o),r(c),u(!1)}i();const o=supabase.channel("sleep_changes").on("postgres_changes",{event:"INSERT",schema:"public",table:"sleep_sessions",filter:`user_id=eq.${t.id}`},(()=>i())).subscribe();return()=>{n=!0,supabase.removeChannel(o)}}),[t,e]),{sessions:s,totals:n,loading:i,error:o}}