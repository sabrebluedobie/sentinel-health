// @ts-nocheck
import{useEffect,useState}from"react";import { supabase } from"../lib/supabase";import{useAuth}from"../components/AuthContext";export function useGlucoseData({days:e=7}={}){const{user:t}=useAuth(),[s,a]=useState([]),[i,u]=useState(!0),[o,n]=useState("");return useEffect((()=>{if(!t)return void u(!1);const s=new Date;s.setDate(s.getDate()-e);let i=!1;!async function(){u(!0);const{data:e,error:o}=await supabase.from("glucose_readings").select("id, device_time, value_mgdl, source, note").eq("user_id",t.id).gte("device_time",s.toISOString()).order("device_time",{ascending:!0});if(!i)if(o)n(o.message||"Failed to fetch glucose data"),u(!1);else{const t=(e||[]).map((e=>({id:e.id,time:new Date(e.device_time),mgdl:Number(e.value_mgdl),source:e.source||"manual",note:e.note||""}))).filter((e=>Number.isFinite(e.mgdl)));a(t),u(!1)}}();const o=supabase.channel("glucose_changes").on("postgres_changes",{event:"INSERT",schema:"public",table:"glucose_readings",filter:`user_id=eq.${t.id}`},(e=>{const t=e.new;a((e=>[...e,{id:t.id,time:new Date(t.device_time),mgdl:Number(t.value_mgdl),source:t.source||"manual",note:t.note||""}]))})).subscribe();return()=>{i=!0,supabase.removeChannel(o)}}),[t,e]),{data:s,loading:i,error:o}}