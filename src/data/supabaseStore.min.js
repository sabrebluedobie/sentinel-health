// @ts-nocheck
import supabase from"@/lib/supabase";const TABLES={glucose:"glucose_readings",sleep:"sleep_data",migraine:"migraine_entries"};async function getCurrentUserId(){const{data:e,error:t}=await supabase.auth.getUser();if(t)throw t;const r=e?.user?.id;if(!r)throw new Error("Not signed in.");return r}export const Glucose={async create(e){const t={user_id:await getCurrentUserId(),device_time:e.device_time,value_mgdl:Number(e.value_mgdl),trend:e.trend??null,source:e.source||"manual",note:e.note??null,created_at:(new Date).toISOString()},{data:r,error:a}=await supabase.from(TABLES.glucose).insert([t]).select().single();if(a)throw a;return r},async listByDayRange(e,t=7,r=500){const a=new Date(Date.now()-864e5*t).toISOString();let n=supabase.from(TABLES.glucose).select("device_time,value_mgdl").gte("device_time",a).order("device_time",{ascending:!0}).limit(r);e&&(n=n.eq("user_id",e));const{data:s,error:i}=await n;if(i)throw i;return s??[]}};export const SleepData={async create(e){const t={user_id:await getCurrentUserId(),start_time:e.start_time,end_time:e.end_time,efficiency:e.efficiency??null,stages:e.stages??null,note:e.note??null,source:e.source||"manual",date:e.date??e.start_time??(new Date).toISOString(),created_at:e.created_at??(new Date).toISOString()},{data:r,error:a}=await supabase.from(TABLES.sleep).insert([t]).select().single();if(a)throw a;return r},async summary(e,t=7){const r=new Date(Date.now()-864e5*t).toISOString();let a=supabase.from(TABLES.sleep).select("start_time,end_time,efficiency").gte("start_time",r).order("start_time",{ascending:!0}).limit(5e3);e&&(a=a.eq("user_id",e));const{data:n,error:s}=await a;if(s)throw s;let i=0,o=0,c=0;for(const e of n??[]){if(e.start_time&&e.end_time){const t=(new Date(e.end_time)-new Date(e.start_time))/6e4;isFinite(t)&&t>0&&(i+=t)}if(null!=e.efficiency){const t=Number(e.efficiency);isFinite(t)&&(o+=t,c++)}}return{totalSleepMinutes:Math.round(i),avgEfficiency:c?o/c:null,count:(n??[]).length}},async listByDayRange(e,t=7,r=200){const a=new Date(Date.now()-864e5*t).toISOString();let n=supabase.from(TABLES.sleep).select("*").gte("start_time",a).order("start_time",{ascending:!1}).limit(r);e&&(n=n.eq("user_id",e));const{data:s,error:i}=await n;if(i)throw i;return s??[]}};export const Migraine={async create(e){const t={user_id:await getCurrentUserId(),pain:Number(e.pain??0),symptoms:e.symptoms??[],notes:e.notes??null,created_at:(new Date).toISOString()},{data:r,error:a}=await supabase.from(TABLES.migraine).insert([t]).select().single();if(a)throw a;return r},async summary(e,t=7){const r=new Date(Date.now()-864e5*t).toISOString();let a=supabase.from(TABLES.migraine).select("symptoms, created_at").gte("created_at",r).order("created_at",{ascending:!0}).limit(5e3);e&&(a=a.eq("user_id",e));const{data:n,error:s}=await a;if(s)throw s;let i=0,o=0,c=0;const u=e=>{if(Array.isArray(e))return e.map((e=>String(e).toLowerCase().trim()));if("string"==typeof e){try{const t=JSON.parse(e);if(Array.isArray(t))return t.map((e=>String(e).toLowerCase().trim()))}catch{}return e.split(",").map((e=>e.toLowerCase().trim())).filter(Boolean)}return[]};for(const e of n??[]){i++;const t=u(e.symptoms);t.includes("aura")&&o++,t.includes("nausea")&&c++}return{count:i,withAura:o,withNausea:c}}};