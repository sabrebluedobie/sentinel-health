// @ts-nocheck
import crypto from"node:crypto";const BASE=process.env.NIGHTSCOUT_URL,RAW_SECRET=process.env.NIGHTSCOUT_API_SECRET;if(!BASE)throw new Error("Missing env NIGHTSCOUT_URL");if(!RAW_SECRET)throw new Error("Missing env NIGHTSCOUT_API_SECRET");const API_SECRET=crypto.createHash("sha1").update(RAW_SECRET).digest("hex");async function nsFetch(t,{method:e="GET",body:n}={}){const s=`${BASE.replace(/\/$/,"")}${t}`,r=await fetch(s,{method:e,headers:{"Content-Type":"application/json","API-SECRET":API_SECRET},body:n?JSON.stringify(n):void 0});if(!r.ok){const n=await r.text().catch((()=>""));throw new Error(`Nightscout ${e} ${t} ${r.status}: ${n||r.statusText}`)}return(r.headers.get("content-type")||"").includes("application/json")?r.json():r.text()}export async function nsTest(t,e){try{const t=await nsFetch("/api/v1/status.json");e.statusCode=200,e.end(JSON.stringify({ok:!0,data:t}))}catch(t){e.statusCode=500,e.end(JSON.stringify({ok:!1,error:String(t.message||t)}))}}export async function nsSave(t,e){try{const n=[];for await(const e of t)n.push(e);const s=JSON.parse(Buffer.concat(n).toString()||"{}"),{kind:r}=s||{};if(!r)throw new Error("Missing 'kind'");if("glucose"===r){const{value_mgdl:t,time:n,reading_type:r,trend:o,note:i}=s;if(!t||!n)throw new Error("value_mgdl and time required");const a=new Date(n).toISOString(),c=Date.parse(a),d="mbg"===(r||"").toLowerCase()||"finger"===(r||"").toLowerCase(),g={type:d?"mbg":"sgv",date:c,dateString:a,device:"sentinel-manual",...d?{mbg:Number(t)}:{sgv:Number(t)},...o?{direction:o}:{},...i?{notes:String(i)}:{}},u=await nsFetch("/api/v1/entries.json",{method:"POST",body:[g]});return e.statusCode=200,e.end(JSON.stringify({ok:!0,out:u}))}if("note"===r||"migraine"===r){const{start_time:t,end_time:n,severity:o,triggers:i,meds_taken:a,notes:c,title:d}=s,g=t?new Date(t).toISOString():(new Date).toISOString(),u=[];"migraine"===r&&(u.push("Migraine"),null!=o&&u.push(`Severity: ${o}`),i&&u.push(`Triggers: ${i}`),a&&u.push(`Meds: ${a}`)),c&&u.push(c),n&&u.push(`Ended: ${new Date(n).toLocaleString()}`);const S={eventType:d||"Note",notes:u.join("\n"),created_at:g},p=await nsFetch("/api/v1/treatments.json",{method:"POST",body:[S]});return e.statusCode=200,e.end(JSON.stringify({ok:!0,out:p}))}throw new Error(`Unsupported kind: ${r}`)}catch(t){e.statusCode=500,e.end(JSON.stringify({ok:!1,error:String(t.message||t)}))}}export async function nsSync(t,e){try{const n=new URL(t.url,"http://x"),s=Number(n.searchParams.get("count")||50),r=await nsFetch(`/api/v1/entries.json?count=${s}`);e.statusCode=200,e.end(JSON.stringify({ok:!0,data:r}))}catch(t){e.statusCode=500,e.end(JSON.stringify({ok:!1,error:String(t.message||t)}))}}