// @ts-nocheck
export const config={runtime:"nodejs"};import{streamText}from"ai";export default async function handler(t,e){try{const o=await readJson(t),r=`\nReturn ONLY valid JSON: an array of 4â€“6 items.\nEach item: { "type": string, "keySymptoms": string[], "likelihood": number 0..1 }.\nSum of likelihoods should be ~1. This is educational, not diagnostic.\nPatient symptoms: ${o?.symptoms||""||"none provided"}\n`.trim(),{textStream:n}=await streamText({model:"openai/gpt-5",prompt:r});let a="";for await(const t of n)a+=t;const i=normalize(safeParseArray(a));e.setHeader("content-type","application/json"),e.status(200).send(JSON.stringify({items:i}))}catch(t){e.setHeader("content-type","application/json"),e.status(500).send(JSON.stringify({error:t?.message||"Server error"}))}}async function readJson(t){try{const e=[];for await(const o of t)e.push(o);const o=Buffer.concat(e).toString("utf8")||"{}";return JSON.parse(o)}catch{return{}}}function safeParseArray(t){try{const e=JSON.parse(t);return Array.isArray(e)?e:[]}catch{return[]}}function normalize(t){const e=(t||[]).filter((t=>t&&"string"==typeof t.type&&Array.isArray(t.keySymptoms)&&"number"==typeof t.likelihood)).map((t=>({type:t.type,keySymptoms:t.keySymptoms.slice(0,4).map(String),likelihood:clamp01(Number(t.likelihood))}))),o=e.reduce(((t,e)=>t+e.likelihood),0)||1;return e.map((t=>({...t,likelihood:t.likelihood/o})))}const clamp01=t=>t<0?0:t>1?1:t;