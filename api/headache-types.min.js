// @ts-nocheck
import{streamText}from"ai";export const config={runtime:"edge"};function buildPrompt(e){return`\nYou are a medical-education assistant (NOT a diagnostic tool). Given the patient's reported headache symptoms, \nreturn a concise JSON array of possible headache types with short distinguishing features and an estimated likelihood.\n\nREQUIREMENTS:\n- Return ONLY valid JSON (no commentary).\n- JSON array of objects, each object with:\n  - "type": string (e.g., "Migraine", "Tension", "Cluster", "Sinus", "Medication-overuse")\n  - "keySymptoms": string[] (2–4 short bullet points)\n  - "likelihood": number (0.0–1.0) that sums to ~1.0 across items\n- Include 4–6 items max.\n- Consider red flags (e.g., thunderclap headache, focal neuro deficits) by lowering likelihoods and adding a "See a clinician" item if appropriate.\n\nPatient-reported symptoms:\n${e||"none provided"}\n`.trim()}export default async function handler(e){try{const{symptoms:t}="POST"===e.method?await e.json():{},i=buildPrompt(t),{textStream:o}=await streamText({model:"openai/gpt-5",prompt:i});let n="";for await(const e of o)n+=e;let r=[];try{r=JSON.parse(n),Array.isArray(r)||(r=[])}catch{r=[]}const a=r.filter((e=>e&&"string"==typeof e.type&&Array.isArray(e.keySymptoms)&&"number"==typeof e.likelihood)).map((e=>({type:e.type,keySymptoms:e.keySymptoms.slice(0,4).map(String),likelihood:Math.max(0,Math.min(1,Number(e.likelihood)))}))),s=a.reduce(((e,t)=>e+t.likelihood),0)||1,m=a.map((e=>({...e,likelihood:e.likelihood/s})));return new Response(JSON.stringify({items:m}),{status:200,headers:{"content-type":"application/json"}})}catch(e){return new Response(JSON.stringify({error:e?.message||"Server error"}),{status:500,headers:{"content-type":"application/json"}})}}