// @ts-nocheck
import{createClient}from"@supabase/supabase-js";import crypto from"crypto";const SUPABASE_URL=process.env.VITE_SUPABASE_URL||process.env.NEXT_PUBLIC_SUPABASE_URL,SERVICE_ROLE=process.env.SUPABASE_SERVICE_ROLE_KEY,supabase=SUPABASE_URL&&SERVICE_ROLE?createClient(SUPABASE_URL,SERVICE_ROLE):null;function send(e,t,r,n={}){for(const[t,r]of Object.entries(n))e.setHeader(t,r);e.status(t).send("string"==typeof r?r:JSON.stringify(r))}async function readBody(e){return"GET"===e.method||"HEAD"===e.method?null:e.body&&"object"==typeof e.body?e.body:new Promise(((t,r)=>{let n="";e.on("data",(e=>n+=e)),e.on("end",(()=>{if(!n)return t({});try{t(JSON.parse(n))}catch{t({raw:n})}})),e.on("error",r)}))}function csvEscape(e){if(null==e)return"";const t=String(e);return/[",\n]/.test(t)?`"${t.replace(/"/g,'""')}"`:t}async function getUserFromAuthHeader(e){const t=(e.headers.authorization||"").match(/^Bearer\s+(.+)$/i);if(!t)return null;const r=t[1];try{const{data:e,error:t}=await supabase.auth.getUser(r);return t?null:e?.user||null}catch{return null}}async function healthIngest(e,t){const r=await readBody(e),{user_id:n,source:s,type:a,start_time:o,end_time:i,value:u,unit:c,raw:d}=r||{};if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});if(!(n&&s&&a&&o))return send(t,400,{ok:!1,error:"Missing required fields"});const{error:l}=await supabase.from("health_readings").insert([{user_id:n,source:s,type:a,start_time:o,end_time:i??null,value:u??null,unit:c??null,raw:d??null}]);return l?send(t,500,{ok:!1,error:l.message}):send(t,200,{ok:!0})}async function exportHealthProvider(e,t){const r=new URL(e.url,`http://${e.headers.host}`).searchParams.get("user_id");if(!r)return send(t,400,"Missing user_id");if(!supabase)return send(t,500,"Supabase not configured");const{data:n,error:s}=await supabase.from("health_readings").select("*").eq("user_id",r).order("start_time",{ascending:!0}).limit(5e3);if(s)return send(t,500,"Query failed");const a=(n||[]).map((e=>[e.id,e.user_id,e.source,e.type,e.start_time,e.end_time??"",e.value??"",e.unit??""]));send(t,200,[["id","user_id","source","type","start_time","end_time","value","unit"].join(","),...a.map((e=>e.map(csvEscape).join(",")))].join("\n"),{"Content-Type":"text/csv","Content-Disposition":`attachment; filename="health_export_${r}.csv"`})}async function cgmConnect(e,t){const r=process.env.CGM_OAUTH_URL||"";return send(t,200,r?{url:r}:{message:"CGM connect not configured. Set CGM_OAUTH_URL in env."})}async function garminWebhook(e,t){if("GET"===e.method)return send(t,200,"ok");const r=await readBody(e);try{const e={user_id:r?.userId||"unknown",source:"garmin",type:r?.type||"unknown",start_time:r?.startTime||(new Date).toISOString(),end_time:r?.endTime||null,value:r?.value??null,unit:r?.unit||null,raw:r};if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});const{error:n}=await supabase.from("health_readings").insert([e]);if(n)throw n;return send(t,200,{ok:!0})}catch(e){return console.error(e),send(t,500,{ok:!1})}}async function terraWebhook(e,t){const r=await readBody(e);if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});const n={user_id:r?.user?.user_id||"unknown",source:"terra",type:r?.type||"unknown",start_time:r?.start_time||(new Date).toISOString(),end_time:r?.end_time||null,value:r?.value??null,unit:r?.unit||null,raw:r},{error:s}=await supabase.from("health_readings").insert([n]);return s?send(t,500,{ok:!1,error:s.message}):send(t,200,{ok:!0})}async function nightscoutPull(e,t){if("POST"!==e.method)return send(t,405,{ok:!1,error:"Use POST"});if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});const r=await getUserFromAuthHeader(e);if(!r)return send(t,401,{ok:!1,error:"Not authenticated"});const n=new URL(e.url,`http://${e.headers.host}`),s=Math.max(1,parseInt(n.searchParams.get("days")||"3",10)),a=Math.max(1,parseInt(n.searchParams.get("count")||"1000",10)),o=new Date(Date.now()-864e5*s).toISOString(),{data:i,error:u}=await supabase.from("nightscout_connections").select("url, token, api_secret").eq("user_id",r.id).single();if(u)return send(t,500,{ok:!1,error:u.message});if(!i?.url)return send(t,400,{ok:!1,error:"Nightscout not configured"});const c=i.url.replace(/\/+$/,""),d=new URLSearchParams;d.set("find[dateString][$gte]",o),d.set("count",String(a)),i.token&&d.set("token",i.token);const l=`${c}/api/v1/entries/sgv.json?${d.toString()}`,h={};i.api_secret&&(h["api-secret"]=crypto.createHash("sha1").update(i.api_secret).digest("hex"));let p=[];try{const e=await fetch(l,{headers:h});if(!e.ok)throw new Error(`Nightscout HTTP ${e.status}`);p=await e.json(),Array.isArray(p)||(p=[])}catch(e){return send(t,502,{ok:!1,error:e.message})}const g=(new Date).toISOString(),m=p.map((e=>{const t=e?.dateString??(e?.date?new Date(e.date).toISOString():null),n=Number(e?.sgv);return t&&isFinite(n)?{user_id:r.id,device_time:t,value_mgdl:n,trend:e?.direction??null,source:"nightscout",note:null,created_at:g}:null})).filter(Boolean),{data:f,error:_}=await supabase.from("glucose_readings").select("device_time").eq("user_id",r.id).gte("device_time",o).limit(5e3);if(_)return send(t,500,{ok:!1,error:_.message});const S=new Set((f||[]).map((e=>new Date(e.device_time).toISOString()))),w=m.filter((e=>!S.has(new Date(e.device_time).toISOString())));let y=0;if(w.length){const{data:e,error:r}=await supabase.from("glucose_readings").insert(w);if(r)return send(t,500,{ok:!1,error:r.message,fetched:m.length,filtered:w.length});y=e?.length??w.length}return send(t,200,{ok:!0,fetched:m.length,inserted:y,skipped:m.length-y})}export default async function handler(e,t){const r=new URL(e.url,`http://${e.headers.host}`).pathname;try{return"/api/health/ingest"===r?healthIngest(e,t):"/api/export/health"===r?exportHealthProvider(e,t):"/api/cgm/connect"===r?cgmConnect(e,t):"/api/webhook/garmin"===r?garminWebhook(e,t):"/api/webhook/terra"===r?terraWebhook(e,t):"/api/nightscout/pull"===r?nightscoutPull(e,t):send(t,404,{ok:!1,error:"Not found"})}catch(e){return console.error(e),send(t,500,{ok:!1,error:"Server error"})}}