// @ts-nocheck
import{createClient}from"@supabase/supabase-js";const SUPABASE_URL=process.env.VITE_SUPABASE_URL||process.env.SUPABASE_URL||process.env.NEXT_PUBLIC_SUPABASE_URL,SERVICE_ROLE=process.env.SUPABASE_SERVICE_ROLE_KEY,supabase=SUPABASE_URL&&SERVICE_ROLE?createClient(SUPABASE_URL,SERVICE_ROLE,{auth:{persistSession:!1}}):null;function cors(e){e.setHeader("Access-Control-Allow-Origin","*"),e.setHeader("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept, Authorization"),e.setHeader("Access-Control-Allow-Methods","GET,POST,PUT,PATCH,DELETE,OPTIONS")}function send(e,t,r,n={}){cors(e);for(const[t,r]of Object.entries(n))e.setHeader(t,r);const o="string"==typeof r;o||n["Content-Type"]||e.setHeader("Content-Type","application/json; charset=utf-8"),e.status(t).send(o?r:JSON.stringify(r))}async function readBody(e){return"GET"===e.method||"HEAD"===e.method||"OPTIONS"===e.method?null:e.body&&"object"==typeof e.body?e.body:new Promise(((t,r)=>{let n="";e.on("data",(e=>n+=e)),e.on("end",(()=>{if(!n)return t({});try{t(JSON.parse(n))}catch{t({raw:n})}})),e.on("error",r)}))}function csvEscape(e){if(null==e)return"";const t=String(e);return/[",\n]/.test(t)?`"${t.replace(/"/g,'""')}"`:t}async function healthIngest(e,t){const r=await readBody(e),{user_id:n,source:o,type:s,start_time:a,end_time:i,value:u,unit:d,raw:c}=r||{};if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});if(!(n&&o&&s&&a))return send(t,400,{ok:!1,error:"Missing required fields"});const{error:l}=await supabase.from("health_readings").insert([{user_id:n,source:o,type:s,start_time:a,end_time:i??null,value:u??null,unit:d??null,raw:c??null}]);return l?send(t,500,{ok:!1,error:l.message}):send(t,200,{ok:!0})}async function exportHealthProvider(e,t){const r=new URL(e.headers["x-vercel-original-url"]||e.url,`http://${e.headers.host}`).searchParams.get("user_id");if(!r)return send(t,400,"Missing user_id");if(!supabase)return send(t,500,"Supabase not configured");const{data:n,error:o}=await supabase.from("health_readings").select("*").eq("user_id",r).order("start_time",{ascending:!0}).limit(5e3);if(o)return send(t,500,"Query failed");const s=(n||[]).map((e=>[e.id,e.user_id,e.source,e.type,e.start_time,e.end_time??"",e.value??"",e.unit??""]));send(t,200,[["id","user_id","source","type","start_time","end_time","value","unit"].join(","),...s.map((e=>e.map(csvEscape).join(",")))].join("\n"),{"Content-Type":"text/csv; charset=utf-8","Content-Disposition":`attachment; filename="health_export_${r}.csv"`})}async function cgmConnect(e,t){await readBody(e);const r=process.env.CGM_OAUTH_URL||"";return send(t,200,r?{url:r}:{message:"CGM connect not configured. Set CGM_OAUTH_URL in environment variables."})}async function garminWebhook(e,t){if("GET"===e.method)return send(t,200,"ok");const r=await readBody(e);try{const e={user_id:r?.userId||"unknown",source:"garmin",type:r?.type||"unknown",start_time:r?.startTime||(new Date).toISOString(),end_time:r?.endTime||null,value:r?.value??null,unit:r?.unit||null,raw:r};if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});const{error:n}=await supabase.from("health_readings").insert([e]);if(n)throw n;return send(t,200,{ok:!0})}catch(e){return console.error(e),send(t,500,{ok:!1})}}async function terraWebhook(e,t){const r=await readBody(e);if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});const n={user_id:r?.user?.user_id||"unknown",source:"terra",type:r?.type||"unknown",start_time:r?.start_time||(new Date).toISOString(),end_time:r?.end_time||null,value:r?.value??null,unit:r?.unit||null,raw:r},{error:o}=await supabase.from("health_readings").insert([n]);return o?send(t,500,{ok:!1,error:o.message}):send(t,200,{ok:!0})}export default async function handler(e,t){if(cors(t),"OPTIONS"===e.method)return send(t,200,"ok");const r=e.headers["x-vercel-original-url"]||e.url,n=new URL(r,`http://${e.headers.host}`).pathname,o=n.replace(/^\/api\/?/,"/");try{return"POST"===e.method&&"/health/ingest"===o?await healthIngest(e,t):"GET"===e.method&&"/health/export"===o?await exportHealthProvider(e,t):"GET"===e.method&&"/cgm/connect"===o?await cgmConnect(e,t):"/garmin/webhook"!==o||"GET"!==e.method&&"POST"!==e.method?"POST"===e.method&&"/terra/webhook"===o?await terraWebhook(e,t):"/"===o||""===o?send(t,200,{ok:!0,routes:[{method:"POST",path:"/api/health/ingest"},{method:"GET",path:"/api/health/export?user_id=..."},{method:"GET",path:"/api/cgm/connect"},{method:"GET|POST",path:"/api/garmin/webhook"},{method:"POST",path:"/api/terra/webhook"}]}):send(t,404,{ok:!1,error:`No route for ${e.method} ${n}`}):await garminWebhook(e,t)}catch(e){return console.error("API error:",e),send(t,500,{ok:!1,error:"Internal error"})}}