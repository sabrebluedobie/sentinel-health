// @ts-nocheck
import{createClient}from"@supabase/supabase-js";import crypto from"node:crypto";async function nightscoutTest(e,t){const r=await readBody(e),s=(r?.url||"").trim(),n=(r?.token||"").trim(),a=(r?.api_secret||"").trim();if(!s||!/^https?:\/\//i.test(s))return send(t,400,{ok:!1,error:"Valid Nightscout URL required"});const o={Accept:"application/json"};if(a){const e=crypto.createHash("sha1").update(a).digest("hex");o["api-secret"]=e}const i=e=>{const t=new URL(e,s.replace(/\/+$/,"/"));return n&&t.searchParams.set("token",n),t.searchParams.set("count","1"),t.toString()},c=[i("/api/v1/entries/sgv.json"),i("/api/v1/entries.json")];for(const e of c)try{const r=await fetch(e,{headers:o});if(!r.ok)continue;const s=await r.json(),n=Array.isArray(s)?s[0]:null;return send(t,200,{ok:!0,sample:n?.sgv??n?.mbg??null})}catch(e){}return send(t,200,{ok:!1,error:"Could not reach Nightscout API with provided credentials"})}const SUPABASE_URL=process.env.VITE_SUPABASE_URL||process.env.NEXT_PUBLIC_SUPABASE_URL||process.env.SUPABASE_URL,SERVICE_ROLE=process.env.SUPABASE_SERVICE_ROLE_KEY,supabase=SUPABASE_URL&&SERVICE_ROLE?createClient(SUPABASE_URL,SERVICE_ROLE):null;function send(e,t,r,s={}){for(const[t,r]of Object.entries(s))e.setHeader(t,r);e.status(t).send("string"==typeof r?r:JSON.stringify(r))}async function readBody(e){return"GET"===e.method||"HEAD"===e.method?null:e.body&&"object"==typeof e.body?e.body:new Promise(((t,r)=>{let s="";e.on("data",(e=>s+=e)),e.on("end",(()=>{if(!s)return t({});try{t(JSON.parse(s))}catch{t({raw:s})}})),e.on("error",r)}))}function csvEscape(e){if(null==e)return"";const t=String(e);return/[",\n]/.test(t)?`"${t.replace(/"/g,'""')}"`:t}async function nightscoutPull(e,t){try{if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});const r=await readBody(e),s=new URL(e.url,`http://${e.headers.host}`),n=(r?.user_id||s.searchParams.get("user_id")||"").trim(),a=(r?.sinceHours||s.searchParams.get("sinceHours")||"24").trim(),o=Math.max(1,Math.min(1440,parseInt(a,10)||24));if(!n)return send(t,400,{ok:!1,error:"Missing user_id"});const{data:i,error:c}=await supabase.from("nightscout_connections").select("url, token, api_secret").eq("user_id",n).order("updated_at",{ascending:!1}).limit(1).maybeSingle();if(c)return send(t,500,{ok:!1,error:c.message});if(!i||!i.url)return send(t,400,{ok:!1,error:"No Nightscout connection for this user."});let u=String(i.url).trim();/^https?:\/\//i.test(u)||(u=`https://${u}`),u=u.replace(/\/+$/,"");const d=new Date(Date.now()-3600*o*1e3).toISOString(),l=new URLSearchParams;l.set("count","1000"),l.set("find[dateString][$gte]",d),i.token&&l.set("token",i.token);const p=`${u}/api/v1/entries/sgv.json?${l.toString()}`,h={};if(i.api_secret){const e=crypto.createHash("sha1").update(String(i.api_secret)).digest("hex");h["api-secret"]=e}let g,m=await fetch(p,{headers:h});if(m.ok)g=await m.json();else{const e=`${u}/api/v1/entries.json?${l.toString()}`;if(m=await fetch(e,{headers:h}),!m.ok){const e=await m.text();return send(t,m.status||502,{ok:!1,error:`Nightscout request failed (${m.status})`,detail:e.slice(0,300)})}g=await m.json()}Array.isArray(g)||(g=[]);const f=g.map((e=>{const t=Number(e.sgv??e.glucose??e.mgdl),r=e.dateString||("number"==typeof e.date?new Date(e.date).toISOString():null)||e.created_at||e._id;return isFinite(t)&&r?{user_id:n,device_time:new Date(r).toISOString(),value_mgdl:t,trend:e.direction??null,source:"nightscout",note:null,created_at:(new Date).toISOString()}:null})).filter(Boolean);if(!f.length)return send(t,200,{ok:!0,pulled:0,inserted:0});const{data:_,error:S}=await supabase.from("glucose_readings").select("device_time").eq("user_id",n).gte("device_time",d).limit(5e3);if(S)return send(t,500,{ok:!1,error:S.message});const w=new Set((_||[]).map((e=>new Date(e.device_time).toISOString()))),y=f.filter((e=>!w.has(e.device_time)));let v=0;for(let e=0;e<y.length;e+=1e3){const r=y.slice(e,e+1e3),{error:s}=await supabase.from("glucose_readings").insert(r);if(s)return send(t,500,{ok:!1,error:s.message,inserted:v});v+=r.length}return send(t,200,{ok:!0,pulled:f.length,inserted:v})}catch(e){return console.error(e),send(t,500,{ok:!1,error:e.message||"Unknown Nightscout error"})}}async function healthIngest(e,t){const r=await readBody(e);if(!supabase)return send(t,500,{ok:!1,error:"Supabase not configured"});const{user_id:s,source:n,type:a,start_time:o,end_time:i,value:c,unit:u,raw:d}=r||{};if(!(s&&n&&a&&o))return send(t,400,{ok:!1,error:"Missing required fields"});const{error:l}=await supabase.from("health_readings").insert([{user_id:s,source:n,type:a,start_time:o,end_time:i??null,value:c??null,unit:u??null,raw:d??null}]);return l?send(t,500,{ok:!1,error:l.message}):send(t,200,{ok:!0})}async function exportHealthProvider(e,t){const r=new URL(e.url,`http://${e.headers.host}`).searchParams.get("user_id");if(!r)return send(t,400,"Missing user_id");if(!supabase)return send(t,500,"Supabase not configured");const{data:s,error:n}=await supabase.from("health_readings").select("*").eq("user_id",r).order("start_time",{ascending:!0}).limit(5e3);if(n)return send(t,500,"Query failed");const a=(s||[]).map((e=>[e.id,e.user_id,e.source,e.type,e.start_time,e.end_time??"",e.value??"",e.unit??""]));send(t,200,[["id","user_id","source","type","start_time","end_time","value","unit"].join(","),...a.map((e=>e.map(csvEscape).join(",")))].join("\n"),{"Content-Type":"text/csv","Content-Disposition":`attachment; filename="health_export_${r}.csv"`})}export default async function handler(e,t){const r=new URL(e.url,`http://${e.headers.host}`).pathname;try{return"/api/cgm/nightscout/pull"===r?await nightscoutPull(e,t):"/api/ingest"===r?await healthIngest(e,t):"/api/export/health.csv"===r?await exportHealthProvider(e,t):send(t,404,{ok:!1,error:"Not found"})}catch(e){return console.error(e),send(t,500,{ok:!1,error:e.message||"Internal error"})}}